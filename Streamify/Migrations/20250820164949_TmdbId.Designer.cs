// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Streamify;

#nullable disable

namespace Streamify.Migrations
{
    [DbContext(typeof(StreamifyDbContext))]
    [Migration("20250820164949_TmdbId")]
    partial class TmdbId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Streamify.Data.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeriesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EpisodeId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Streamify.Data.MediaFile", b =>
                {
                    b.Property<int>("MediaFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MediaFileId");

                    b.HasIndex("EpisodeId")
                        .IsUnique()
                        .HasFilter("\"EpisodeId\" IS NOT NULL");

                    b.HasIndex("MovieId")
                        .HasFilter("\"MovieId\" IS NOT NULL");

                    b.ToTable("MediaFiles", t =>
                        {
                            t.HasCheckConstraint("CK_MediaFile_ExactlyOneParent", "((\"MovieId\" IS NOT NULL AND \"EpisodeId\" IS NULL) OR (\"MovieId\" IS NULL AND \"EpisodeId\" IS NOT NULL))");
                        });
                });

            modelBuilder.Entity("Streamify.Data.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TmdbId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MovieId");

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Streamify.Data.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TmdbId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SeriesId");

                    b.HasIndex("TmdbId")
                        .IsUnique();

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Streamify.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DarkMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Streamify.Data.WatchHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastWatched")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProgressSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HistoryId");

                    b.HasIndex("EpisodeId")
                        .HasFilter("\"EpisodeId\" IS NOT NULL");

                    b.HasIndex("MovieId")
                        .HasFilter("\"MovieId\" IS NOT NULL");

                    b.HasIndex("UserId", "EpisodeId")
                        .HasFilter("\"EpisodeId\" IS NOT NULL");

                    b.HasIndex("UserId", "MovieId")
                        .HasFilter("\"MovieId\" IS NOT NULL");

                    b.ToTable("WatchHistories", t =>
                        {
                            t.HasCheckConstraint("CK_WatchHistory_ExactlyOneTarget", "((\"MovieId\" IS NOT NULL AND \"EpisodeId\" IS NULL) OR (\"MovieId\" IS NULL AND \"EpisodeId\" IS NOT NULL))");
                        });
                });

            modelBuilder.Entity("Streamify.Data.Episode", b =>
                {
                    b.HasOne("Streamify.Data.Series", "Series")
                        .WithMany("Episodes")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Streamify.Data.MediaFile", b =>
                {
                    b.HasOne("Streamify.Data.Episode", "Episode")
                        .WithOne("MediaFile")
                        .HasForeignKey("Streamify.Data.MediaFile", "EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Streamify.Data.Movie", "Movie")
                        .WithMany("MediaFiles")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Episode");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Streamify.Data.WatchHistory", b =>
                {
                    b.HasOne("Streamify.Data.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Streamify.Data.Movie", "Movie")
                        .WithMany("WatchHistoryEntries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Streamify.Data.User", "User")
                        .WithMany("WatchHistoryEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Streamify.Data.Episode", b =>
                {
                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("Streamify.Data.Movie", b =>
                {
                    b.Navigation("MediaFiles");

                    b.Navigation("WatchHistoryEntries");
                });

            modelBuilder.Entity("Streamify.Data.Series", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("Streamify.Data.User", b =>
                {
                    b.Navigation("WatchHistoryEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
