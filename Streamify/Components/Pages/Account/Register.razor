@page "/register"
@using System.ComponentModel.DataAnnotations
@using Streamify.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using Streamify.Components.Layout
@inject StreamifyDbContext Db
@inject NavigationManager Nav
@inject ISnackbar Snackbar
@inject ILogger<Register> Logger
@layout UnauthenticatedLayout
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JS

<PageTitle>Register</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudPaper Elevation="4" Class="pa-6">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6">Registrati</MudText>

        <EditForm EditContext="_editContext" OnValidSubmit="RegisterAsync">
            <DataAnnotationsValidator />

            <MudTextField Label="Nome"
                          @bind-Value="_model.Name"
                          Variant="Variant.Outlined"
                          For="@(()=> _model.Name)"
                          Class="mb-4"
                          Required="true"
                          Immediate="true" />

            <MudTextField Label="Email"
                          @bind-Value="_model.Email"
                          Variant="Variant.Outlined"
                          For="@(()=> _model.Email)"
                          Class="mb-4"
                          Required="true"
                          Immediate="true" />

            <MudTextField Label="Password"
                          @bind-Value="_model.Password"
                          InputType="@(_showPwd ? InputType.Text : InputType.Password)"
                          Variant="Variant.Outlined"
                          For="@(()=> _model.Password)"
                          Class="mb-1"
                          Required="true"
                          Immediate="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showPwd ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                          OnAdornmentClick="@(()=> _showPwd = !_showPwd)" />

            <MudTextField Label="Ripeti Password"
                          @bind-Value="_model.ConfirmPassword"
                          InputType="@(_showConfirm ? InputType.Text : InputType.Password)"
                          Variant="Variant.Outlined"
                          For="@(()=> _model.ConfirmPassword)"
                          Class="mb-3"
                          Required="true"
                          Immediate="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_showConfirm ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                          OnAdornmentClick="@(()=> _showConfirm = !_showConfirm)" />

            <MudStack Row="true" AlignItems="AlignItems.Baseline">
                <MudSwitch T="bool"
                           @bind-Value="_model.DarkMode"
                           Color="Color.Primary"
                           Class="mb-4"
                           Label="Modalità"/>
                       
                <MudIcon
                    Icon="@(_model.DarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)"/>

            </MudStack>
            
            
            <MudCheckBox T="bool"
                         @bind-Value="_model.RememberMe"
                         Color="Color.Primary"
                         Class="mb-4">
                Ricordami
                </MudCheckBox>
            
            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="_submitting"
                       FullWidth="true"
                       StartIcon="@Icons.Material.Filled.PersonAdd">
                @if (_submitting)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                }
                Crea Account
            </MudButton>
        </EditForm>

        <MudDivider Class="my-4" />

        <MudText Typo="Typo.body2" Align="Align.Center">
            Hai già un account?
            <MudLink Href="/login">Accedi</MudLink>
        </MudText>
    </MudPaper>
</MudContainer>

<form id="serverLoginForm" method="post" action="/login-action" style="display:none;">
    <input type="hidden" name="email" id="hiddenEmail" />
    <input type="hidden" name="password" id="hiddenPassword" />
    <input type="hidden" name="rememberMe" id="hiddenRemember" />
</form>

<script>
    window.submitLoginForm = (data) => {
        document.getElementById('hiddenEmail').value = data.email;
        document.getElementById('hiddenPassword').value = data.password;
        document.getElementById('hiddenRemember').value = data.rememberMe;
        document.getElementById('serverLoginForm').submit();
    };
</script>

@code {
    private RegisterModel _model = new();
    private EditContext _editContext;
    private bool _showPwd;
    private bool _showConfirm;
    private bool _submitting;
    private bool _confirmTouched;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _editContext.OnFieldChanged += OnFieldChanged;
    }

    private void OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(RegisterModel.ConfirmPassword))
        {
            _confirmTouched = true;
        }
        else if (e.FieldIdentifier.FieldName == nameof(RegisterModel.Password))
        {
            if (_confirmTouched && !string.IsNullOrEmpty(_model.ConfirmPassword))
            {
                var confirmField = new FieldIdentifier(_model, nameof(RegisterModel.ConfirmPassword));
                _editContext.NotifyFieldChanged(confirmField);
            }
        }
    }

    private void ResetForm()
    {
        _editContext.OnFieldChanged -= OnFieldChanged;
        _model = new RegisterModel();
        _editContext = new EditContext(_model);
        _editContext.OnFieldChanged += OnFieldChanged;
        _confirmTouched = false;
        StateHasChanged();
    }

    private async Task RegisterAsync()
    {
        if (_submitting) return;
        _submitting = true;

        try
        {
            var emailNorm = _model.Email.Trim();
            if (await Db.Users.AnyAsync(u => u.Email == emailNorm))
            {
                Snackbar.Add("Indirizzo Email già registrato.", Severity.Error);
                return;
            }

            using var tx = await Db.Database.BeginTransactionAsync();

            var user = new User
            {
                Name = _model.Name.Trim(),
                Email = emailNorm,
                HashedPassword = BCrypt.Net.BCrypt.HashPassword(_model.Password),
                Role = "User",
                DarkMode = _model.DarkMode
            };

            Db.Users.Add(user);
            await Db.SaveChangesAsync();
            await tx.CommitAsync();
            
            Snackbar.Add("Registrazione avvenuta con successo. Accesso effettuato.", Severity.Success);
            await JS.InvokeVoidAsync("submitLoginForm", new
            {
                email = user.Email,
                password = _model.Password,
                rememberMe = _model.RememberMe
            });
            ResetForm();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected registration error.");
            Snackbar.Add("Registrazione fallita.", Severity.Error);
        }
        finally
        {
            _submitting = false;
        }
    }

    private class RegisterModel
    {
        [Required, StringLength(100)]
        public string Name { get; set; } = "";
        [Required, EmailAddress]
        public string Email { get; set; } = "";
        [Required, MinLength(6)]
        public string Password { get; set; } = "";
        [Required, Compare(nameof(Password), ErrorMessage = "Le password non corrispondono.")]
        public string ConfirmPassword { get; set; } = "";
        public bool DarkMode { get; set; }
        public bool RememberMe { get; set; } = false;
    }
}