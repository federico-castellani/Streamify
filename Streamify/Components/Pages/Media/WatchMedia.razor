@page "/media/movie/{MovieSlug}/play"
@page "/media/series/{SeriesSlug}/play/{EpisodeSlug}"
@inject StreamifyDbContext Db
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Streamify.Components.Layout
@using Streamify.Data
@using Streamify.Services
@using Streamify.Utility
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable
@layout PlayerLayout

@attribute [Authorize]

<PageTitle>@mediaTitle</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0">
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="ma-4">
            <MudText>@errorMessage</MudText>
        </MudAlert>
    }
    else if (!string.IsNullOrEmpty(videoPath))
    {
        <div class="video-container" 
             style="position: relative; background: black; height: 100vh; overflow: hidden; cursor: @(showControls ? "default" : "none");"
             @onmouseenter="OnMouseEnter"
             @onmouseleave="OnMouseLeave"
             @onmousemove="OnMouseMove">
            <!-- Video Element -->
            <video @ref="videoElement" 
                   @key="videoPath"
                   id="mediaPlayer"
                   autoplay
                   style="width: 100%; height: 100vh; object-fit: contain;"
                   @onloadedmetadata="OnVideoLoaded"
                   @ontimeupdate="OnTimeUpdate"
                   @onplay="OnPlay"
                   @onpause="OnPause"
                   @onended="OnEnded">
                <source src="@videoPath" type="video/mp4" />
                Your browser does not support the video tag.
            </video>

            <!-- Custom Controls Overlay -->
            <div class="controls-overlay" style="@GetControlsStyle()">
                <!-- Top Bar -->
                <div class="top-controls" style="position: absolute; top: 0; left: 0; right: 0; background: linear-gradient(rgba(0,0,0,0.7), transparent); padding: 16px; z-index: 1000;">
                    <MudGrid>
                        <MudItem>
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" 
                                         Color="Color.Primary" 
                                         Size="Size.Large"
                                         Style="background-color: rgba(0,0,0,0.7);"
                                         OnClick="GoBack"/>
                        </MudItem>
                        <MudItem>
                            <MudText Typo="Typo.h6" Style="color: white; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">
                                @GetMediaTitle()
                            </MudText>
                            @if (!string.IsNullOrEmpty(GetMediaSubtitle()))
                            {
                                <MudText Typo="Typo.body2" Style="color: #cccccc; text-shadow: 2px 2px 4px rgba(0,0,0,0.5);">
                                    @GetMediaSubtitle()
                                </MudText>
                            }
                        </MudItem>
                    </MudGrid>
                </div>

                <!-- Center Play/Pause Button (only when controls are visible) -->
                @if (showControls)
                {
                    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1001;">
                        @if (isPlaying)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Pause"
                                           Color="Color.Primary"
                                           Size="Size.Large"
                                           Style="background-color: rgba(0,0,0,0.7);"
                                           OnClick="TogglePlayPause"/>
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow"
                                           Color="Color.Primary"
                                           Size="Size.Large"
                                           Style="background-color: rgba(0,0,0,0.7);"
                                           OnClick="TogglePlayPause"/>
                        }
                        
                    </div>
                }

                <!-- Bottom Controls -->
                <div class="bottom-controls" style="position: absolute; bottom: 0; left: 0; right: 0; background: linear-gradient(transparent, rgba(0,0,0,0.7)); padding: 16px; z-index: 1000;">
                    <!-- Progress Bar -->
                    <MudSlider T="double"
                               Min="0"
                               Max="@duration"
                               Step="1"
                               Value="@currentTime"
                               ValueChanged="OnSeek"
                               Color="Color.Primary"
                               Class="mb-4" />

                    <MudGrid Justify="Justify.SpaceBetween">
                        <!-- Left Controls -->
                        <MudItem>
                            <MudGrid Class="d-flex align-center flex-grow-1">
                                <MudItem>
                                    <MudIconButton Icon="@(isPlaying ? Icons.Material.Filled.Pause : Icons.Material.Filled.PlayArrow)"
                                                   Color="Color.Primary"
                                                   Size="Size.Large"
                                                   Style="background-color: rgba(0,0,0,0.7);"
                                                   OnClick="TogglePlayPause"/>
                                </MudItem>
                                @if (!ShouldHideControlOnNarrowScreen())
                                {
                                    <MudItem>
                                        <MudIconButton Icon="@Icons.Material.Filled.Replay10"
                                                       Color="Color.Primary"
                                                       Size="Size.Large"
                                                       Style="background-color: rgba(0,0,0,0.7);"
                                                       OnClick="() => Seek(-10)"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudIconButton Icon="@Icons.Material.Filled.Forward10"
                                                       Color="Color.Primary"
                                                       Size="Size.Large"
                                                       Style="background-color: rgba(0,0,0,0.7);"
                                                       OnClick="() => Seek(10)"/>
                                    </MudItem>
                                }
                                
                                <MudItem>
                                    <MudText 
                                        Typo="Typo.body1" 
                                        Style="color: white;">
                                        @FormatTime(currentTime) / @FormatTime(duration)
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <!-- Right Controls -->
                        <MudItem>
                            <MudGrid Class="d-flex align-center flex-grow-1">
                                <MudItem>
                                    <MudIconButton Icon="@(isMuted ? Icons.Material.Filled.VolumeOff : Icons.Material.Filled.VolumeUp)"
                                                   Color="Color.Primary"
                                                   Size="Size.Large"
                                                   Style="background-color: rgba(0,0,0,0.7);"
                                                   OnClick="ToggleMute"/>
                                </MudItem>
                                
                                @if (!ShouldHideControlOnNarrowScreen())
                                {
                                    <MudItem>
                                        <MudSlider T="double"
                                                   Min="0"
                                                   Max="1"
                                                   Step="0.1"
                                                   Value="@volume"
                                                   ValueChanged="OnVolumeChange"
                                                   Color="Color.Primary"/>
                                    </MudItem>

                                    var currentIndex = episodes?.FindIndex(e => Slugify.SlugifyUrl(e.Title) == EpisodeSlug) ?? -1;
                                    var hasNextEpisode = episodes != null && currentIndex >= 0 && currentIndex < episodes.Count - 1;
                                    var nextEpisode = hasNextEpisode ? episodes[currentIndex + 1] : null;

                                    @if (hasNextEpisode && nextEpisode != null)
                                    {
                                        <MudItem>
                                            <MudButton Color="Color.Primary"
                                                       Variant="Variant.Filled"
                                                       OnClick="() => NavigateToEpisode(nextEpisode)">
                                                Prossimo Episodio
                                            </MudButton>
                                        </MudItem>
                                    }
                                }

                                <MudItem>
                                    <MudIconButton Icon="@Icons.Material.Filled.Fullscreen"
                                                   Color="Color.Primary"
                                                   Size="Size.Large"
                                                   Style="background-color: rgba(0,0,0,0.7);"
                                                   OnClick="ToggleFullscreen"/>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </div>
            </div>
        </div>
    }
</MudContainer>

@code {
    [Parameter] public string? MovieSlug { get; set; }
    [Parameter] public string? SeriesSlug { get; set; }
    [Parameter] public string? EpisodeSlug { get; set; }

    private ElementReference videoElement;
    private string? videoPath;
    private string? errorMessage;
    private string? mediaTitle;
    private string? mediaSubtitle;
    private Timer? watchHistoryTimer;
    private bool isDisposed = false;
    private int resumeSeconds = 0;
    
    // Video state
    private bool isPlaying = false;
    private bool isMuted = false;
    private double currentTime = 0;
    private double duration = 0;
    private double volume = 1.0;
    private double volumeBeforeMute = 1.0;
    private double playbackSpeed = 1.0;
    
    // UI state
    private bool showControls = true;
    private bool showCenterButton = false;
    private bool showEpisodeNav = false;
    private bool isMouseOver = false;
    private Timer? controlsTimer;
    private Timer? cursorTimer;
    private List<Episode>? episodes;
    
    private int screenWidth = 0;
    private const int NARROW_SCREEN_THRESHOLD = 768;
    private DotNetObjectReference<WatchMedia>? _dotNetRef;
    
    private bool ShouldHideControlOnNarrowScreen()
    {
        return screenWidth < NARROW_SCREEN_THRESHOLD;
    }

    [JSInvokable]
    public void OnBrowserResize(int width)
    {
        screenWidth = width;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(MovieSlug))
        {
            await LoadMovie();
        }
        else if (!string.IsNullOrEmpty(SeriesSlug) && !string.IsNullOrEmpty(EpisodeSlug))
        {
            await LoadEpisode();
        }
        else
        {
            errorMessage = "Invalid media request.";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(videoPath))
        {
            await JSRuntime.InvokeVoidAsync("initializeVideoPlayer", videoElement);
        
            // Get initial screen width and setup resize listener
            screenWidth = await BrowserService.GetInnerWidth(JSRuntime);
            _dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("browser.onResize", _dotNetRef);
        
            StateHasChanged();
        }
    }

    private async Task LoadMovie()
    {
        var movie = (await Db.Movies
                .Include(m => m.MediaFiles)
                .ToListAsync())
            .FirstOrDefault(m => Slugify.SlugifyUrl(m.Title) == MovieSlug);

        if (movie != null)
        {
            var mediaFile = movie.MediaFiles.FirstOrDefault();
            if (mediaFile != null)
            {
                videoPath = $"/api/media/stream/movie/{MovieSlug}/{Path.GetFileName(mediaFile.FilePath)}";
                mediaTitle = movie.Title;
                mediaSubtitle = $"{movie.ReleaseDate?.Year} • Film";

                // Get last watched position
                var userId = await GetUserIdFromClaimsAsync();
                if (userId.HasValue)
                {
                    var history = await Db.WatchHistories
                        .FirstOrDefaultAsync(h => h.UserId == userId && h.MovieId == movie.MovieId);
                    resumeSeconds = history?.ProgressSeconds ?? 0;
                }
            }
            else
            {
                errorMessage = "Media file not found for this movie.";
            }
        }
        else
        {
            errorMessage = "Movie not found.";
        }
    }

    private async Task LoadEpisode()
    {
        var series = (await Db.Series
                .Include(s => s.Episodes.OrderBy(e => e.EpisodeNumber))
                .ThenInclude(e => e.MediaFile)
                .ToListAsync())
            .FirstOrDefault(s => Slugify.SlugifyUrl(s.Title) == SeriesSlug);

        if (series != null)
        {
            episodes = series.Episodes.ToList();
            var episode = episodes.FirstOrDefault(e => Slugify.SlugifyUrl(e.Title) == EpisodeSlug);

            if (episode?.MediaFile != null)
            {
                videoPath = $"/api/media/stream/series/{SeriesSlug}/{Path.GetFileName(episode.MediaFile.FilePath)}";
                mediaTitle = series.Title;
                mediaSubtitle = $"S{episode.SeasonNumber}E{episode.EpisodeNumber} • {episode.Title}";

                // Get last watched position
                var userId = await GetUserIdFromClaimsAsync();
                if (userId.HasValue)
                {
                    var history = await Db.WatchHistories
                        .FirstOrDefaultAsync(h => h.UserId == userId && h.EpisodeId == episode.EpisodeId);
                    resumeSeconds = history?.ProgressSeconds ?? 0;
                }
            }
            else
            {
                errorMessage = "Media file not found for this episode.";
            }
        }
        else
        {
            errorMessage = "Series not found.";
        }
    }

    // Mouse event handlers
    private void OnMouseEnter()
    {
        isMouseOver = true;
        showControls = true;
        StopCursorTimer();
        StateHasChanged();
    }

    private void OnMouseLeave()
    {
        isMouseOver = false;
        if (isPlaying)
        {
            showControls = false;
        }
        StopCursorTimer();
        StateHasChanged();
    }

    private void OnMouseMove()
    {
        if (!showControls && isMouseOver)
        {
            showControls = true;
            StateHasChanged();
        }
        
        StartCursorTimer();
    }

    private void StartCursorTimer()
    {
        StopCursorTimer();
        cursorTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                if(isDisposed) return;
                if (isPlaying && isMouseOver)
                {
                    showControls = false;
                    StateHasChanged();
                }
            });
        }, null, TimeSpan.FromSeconds(3), Timeout.InfiniteTimeSpan);
    }

    private void StopCursorTimer()
    {
        cursorTimer?.Dispose();
        cursorTimer = null;
    }

    private string GetMediaTitle() => mediaTitle ?? "Unknown Media";
    private string GetMediaSubtitle() => mediaSubtitle ?? "";

    private async Task OnVideoLoaded()
    {
        duration = await JSRuntime.InvokeAsync<double>("getVideoDuration", videoElement);
        if (resumeSeconds > 0 && resumeSeconds < duration)
        {
            await JSRuntime.InvokeVoidAsync("setCurrentTime", videoElement, resumeSeconds);
            currentTime = resumeSeconds;
        }
        StateHasChanged();
    }

    private async Task OnTimeUpdate()
    {
        currentTime = await JSRuntime.InvokeAsync<double>("getCurrentTime", videoElement);
        StateHasChanged();
    }

    private void OnPlay()
    {
        isPlaying = true;
        showCenterButton = false;
        StartWatchHistoryTimer();
        
        // Start cursor timer if mouse is over the video
        if (isMouseOver)
        {
            StartCursorTimer();
        }
        else
        {
            showControls = false;
        }
        
        StateHasChanged();
    }

    private void OnPause()
    {
        isPlaying = false;
        showCenterButton = true;
        showControls = true;
        StopCursorTimer();
        StateHasChanged();
        StopWatchHistoryTimer();
    }

    private async Task OnEnded()
    {
        isPlaying = false;
        showCenterButton = true;
        showControls = true;
        StopCursorTimer();
        await SaveWatchHistory();
        
        // Autoplay next episode if available
        if (!string.IsNullOrEmpty(SeriesSlug) && episodes?.Count > 0)
        {
            var currentIndex = episodes.FindIndex(e => Slugify.SlugifyUrl(e.Title) == EpisodeSlug);
            if (currentIndex >= 0 && currentIndex < episodes.Count - 1)
            {
                await NavigateToEpisode(episodes[currentIndex + 1]);
            }
        }
        
        StateHasChanged();
    }

    private async Task TogglePlayPause()
    {
        if (isPlaying)
        {
            await JSRuntime.InvokeVoidAsync("pauseVideo", videoElement);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("playVideo", videoElement);
        }
    }

    private async Task OnSeek(double time)
    {
        currentTime = time;
        await JSRuntime.InvokeVoidAsync("setCurrentTime", videoElement, time);
    }

    private async Task Seek(double seconds)
    {
        var newTime = Math.Max(0, Math.Min(duration, currentTime + seconds));
        await OnSeek(newTime);
    }

    private async Task OnVolumeChange(double newVolume)
    {
        volume = newVolume;
        await JSRuntime.InvokeVoidAsync("setVolume", videoElement, volume);
        isMuted = volume == 0;
    }

    private async Task ToggleMute()
    {
        if (isMuted)
        {
            await OnVolumeChange(volumeBeforeMute);
        }
        else
        {
            volumeBeforeMute = volume;
            await OnVolumeChange(0);
        }
    }

    private async Task ToggleFullscreen()
    {
        await JSRuntime.InvokeVoidAsync("toggleFullscreen", videoElement);
    }

    private async void GoBack()
    {
        await SaveWatchHistory();

        if (!string.IsNullOrEmpty(MovieSlug))
        {
            Navigation.NavigateTo($"/media/movie/{MovieSlug}");
        }
        else if (!string.IsNullOrEmpty(SeriesSlug))
        {
            Navigation.NavigateTo($"/media/series/{SeriesSlug}");
        }
    }

    private async Task NavigateToEpisode(Episode episode)
    {
        var episodeSlug = Slugify.SlugifyUrl(episode.Title);
        Navigation.NavigateTo($"/media/series/{SeriesSlug}/play/{episodeSlug}");
        
        showEpisodeNav = false;
    }

    private string GetControlsStyle()
    {
        return showControls ? "opacity: 1; transition: opacity 0.3s;" : "opacity: 0; transition: opacity 0.3s; pointer-events: none;";
    }

    private string FormatTime(double seconds)
    {
        var time = TimeSpan.FromSeconds(seconds);
        return time.TotalHours >= 1 
            ? $"{(int)time.TotalHours}:{time.Minutes:D2}:{time.Seconds:D2}"
            : $"{time.Minutes:D2}:{time.Seconds:D2}";
    }

    public void Dispose()
    {
        isDisposed = true;
        controlsTimer?.Dispose();
        cursorTimer?.Dispose();
        watchHistoryTimer?.Dispose();
        _dotNetRef?.Dispose();
    }
    
    private async Task StartWatchHistoryTimer()
    {
        StopWatchHistoryTimer();
        watchHistoryTimer = new Timer(_ =>
        {
            InvokeAsync(async () =>
            {
                if (isDisposed) return;
                await SaveWatchHistory();
            });
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }

    private void StopWatchHistoryTimer()
    {
        watchHistoryTimer?.Dispose();
        watchHistoryTimer = null;
    }

    private async Task<int?> GetUserIdFromClaimsAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Try to get the "sub" or "UserId" claim
        var userIdClaim = user.FindFirst("sub") ?? user.FindFirst("UserId") ?? user.FindFirst(ClaimTypes.NameIdentifier);
        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var userId))
        {
            return userId;
        }
        return null;
    }
    
    private async Task SaveWatchHistory()
    {
        if (currentTime < 1) return;

        var userId = await GetUserIdFromClaimsAsync();
        WatchHistory? history = null;
        double threshold = 0.95; // 95%

        if (!string.IsNullOrEmpty(MovieSlug))
        {
            var movies = await Db.Movies.ToListAsync();
            var movie = movies.FirstOrDefault(m => Slugify.SlugifyUrl(m.Title) == MovieSlug);
            if (movie == null) return;

            history = await Db.WatchHistories
                .FirstOrDefaultAsync(h => h.UserId == userId && h.MovieId == movie.MovieId);
            if (history == null)
            {
                history = new WatchHistory
                {
                    UserId = userId.Value,
                    MovieId = movie.MovieId,
                    ProgressSeconds = (int)currentTime,
                    LastWatched = DateTime.UtcNow,
                    Completed = false
                };
                Db.WatchHistories.Add(history);
            }
            else
            {
                history.ProgressSeconds = (int)currentTime;
                history.LastWatched = DateTime.UtcNow;
            }

            if (duration > 0 && currentTime >= duration * threshold)
            {
                history.Completed = true;
                history.ProgressSeconds = 0;
            }
            else
            {
                history.Completed = false;
            }
        }
        else if (!string.IsNullOrEmpty(SeriesSlug) && !string.IsNullOrEmpty(EpisodeSlug))
        {
            var episodes = await Db.Episodes.Include(e => e.Series).ToListAsync();
            var episode = episodes.FirstOrDefault(e => Slugify.SlugifyUrl(e.Title) == EpisodeSlug && Slugify.SlugifyUrl(e.Series.Title) == SeriesSlug);
            if (episode == null) return;

            history = await Db.WatchHistories
                .FirstOrDefaultAsync(h => h.UserId == userId && h.EpisodeId == episode.EpisodeId);
            if (history == null)
            {
                history = new WatchHistory
                {
                    UserId = userId.Value,
                    EpisodeId = episode.EpisodeId,
                    ProgressSeconds = (int)currentTime,
                    LastWatched = DateTime.UtcNow,
                    Completed = false
                };
                Db.WatchHistories.Add(history);
            }
            else
            {
                history.ProgressSeconds = (int)currentTime;
                history.LastWatched = DateTime.UtcNow;
            }

            if (duration > 0 && currentTime >= duration * threshold)
            {
                history.Completed = true;
                history.ProgressSeconds = 0;
            }
            else
            {
                history.Completed = false;
            }
        }

        await Db.SaveChangesAsync();
    }
}