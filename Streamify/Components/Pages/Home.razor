@page "/"
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Streamify.Data
@using Streamify.TMDB
@using Streamify.Utility
@inject StreamifyDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject ITmdbClient Tmdb
@inject NavigationManager Nav
@attribute [Authorize]

<PageTitle>Streamify</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudTextField @bind-Value="_searchText"
                  Label="Cerca film o serie..."
                  Variant="Variant.Outlined"
                  Immediate="true"
                  OnKeyDown="OnSearchInput"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Class="mb-4"
    />
    
    @if (_showSearchResults)
    {
        <MudStack Spacing="2" Class="mb-6">
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5">Risultati ricerca: "@_searchText"</MudText>
                <MudButton StartIcon="@Icons.Material.Filled.Clear" 
                          Color="Color.Secondary" 
                          Size="Size.Small"
                          OnClick="ClearSearch">
                    Cancella
                </MudButton>
            </MudStack>

            @if (_isSearching)
            {
                <MudProgressCircular Indeterminate Size="Size.Small" Class="ma-2"/>
            }
            else if (!_searchMovieResults.Any() && !_searchSeriesResults.Any())
            {
                <MudAlert Severity="Severity.Warning">
                    Nessun risultato trovato per "@_searchText".
                </MudAlert>
            }
            else
            {
                @* Search Results - Movies *@
                @if (_searchMovieResults.Any())
                {
                    <MudStack Spacing="1" Class="mb-4">
                        <MudText Typo="Typo.h6">Film (@_searchMovieResults.Count)</MudText>
                        <MudGrid GutterSize="3">
                            @foreach (var m in _searchMovieResults.Take(12))
                            {
                                var meta = GetMeta(m.TmdbId, m.Title, false);
                                var subtitle = $"Film";
                                
                                @* Add duration if available *@
                                if (m.DurationMinutes.HasValue && m.DurationMinutes > 0)
                                {
                                    subtitle += $" • {m.DurationMinutes}min";
                                }

                                <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                                    @PosterCardHelper.PosterCard(
                                        this,
                                        meta.Title,
                                        subtitle,
                                        GetMeta(m.TmdbId, m.Title, false),
                                        onClick: () => {
                                            var movie = _popularMovies.FirstOrDefault(m => m.TmdbId == meta.TmdbId);
                                            if (movie != null)
                                                Nav.NavigateTo($"/media/movie/{Slugify.SlugifyUrl(movie.Title)}");
                                        },
                                        tmdb: Tmdb
                                    )
                                </MudItem>
                            }
                        </MudGrid>
                        
                        @* Show more results if there are many *@
                        @if (_searchMovieResults.Count > 12)
                        {
                            <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                                Mostrati 12 di @_searchMovieResults.Count risultati
                            </MudText>
                        }
                    </MudStack>
                }

                @* Search Results - Series *@
                @if (_searchSeriesResults.Any())
                {
                    <MudStack Spacing="1" Class="mb-4">
                        <MudText Typo="Typo.h6">Serie TV (@_searchSeriesResults.Count)</MudText>
                        <MudGrid GutterSize="3">
                            @foreach (var s in _searchSeriesResults.Take(12))
                            {
                                var meta = GetMeta(s.TmdbId, s.Title, true);
                                var episodeCount = s.Episodes?.Count ?? 0;
                                var seasonCount = s.Episodes?.GroupBy(e => e.SeasonNumber).Count() ?? 0;
                                
                                var subtitle = "Serie TV";
                                if (seasonCount > 0)
                                {
                                    subtitle += $" • {seasonCount} stagion{(seasonCount == 1 ? "e" : "i")}";
                                }
                                if (episodeCount > 0)
                                {
                                    subtitle += $" • {episodeCount} episodi";
                                }
                                
                                <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                                    @PosterCardHelper.PosterCard(
                                        this,
                                        meta.Title,
                                        subtitle,
                                        GetMeta(s.TmdbId, s.Title, true),
                                        onClick: () => {
                                            var series = _popularSeries.FirstOrDefault(s => s.TmdbId == meta.TmdbId);
                                            if (series != null)
                                                Nav.NavigateTo($"/media/series/{Slugify.SlugifyUrl(series.Title)}");
                                        },
                                        tmdb: Tmdb
                                    )
                                </MudItem>
                            }
                        </MudGrid>
                        
                        @* Show more results if there are many *@
                        @if (_searchSeriesResults.Count > 12)
                        {
                            <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                                Mostrati 12 di @_searchSeriesResults.Count risultati
                            </MudText>
                        }
                    </MudStack>
                }
            }
        </MudStack>
    }
    else if (_loading)
    {
        <MudProgressCircular Indeterminate Class="ma-auto d-block"/>
    }
    else
    {
        @if (_continueMovieEntries.Any() || _continueEpisodeEntries.Any())
        {
            <MudStack Spacing="1" Class="mb-6">
                <MudText Typo="Typo.h5">Continua a guardare</MudText>
                <MudGrid GutterSize="3">
                    @foreach (var c in _continueMovieEntries)
                    {
                        if (c.Movie is { } m)
                        {
                            var meta = GetMeta(m.TmdbId, m.Title, false);
                            var progress = CalcProgress(c.ProgressSeconds, m.DurationMinutes);
                            <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                                @PosterCardHelper.PosterCard(
                                    this,
                                    meta.Title,
                                    null,
                                    GetMeta(m.TmdbId, m.Title, false),
                                    progress: progress,
                                    onClick: () => {
                                        var movie = _popularMovies.FirstOrDefault(m => m.TmdbId == meta.TmdbId);
                                        if (movie != null)
                                            Nav.NavigateTo($"/media/movie/{Slugify.SlugifyUrl(movie.Title)}");
                                    },
                                    tmdb: Tmdb
                                )
                            </MudItem>
                        }
                    }
                    @foreach (var c in _continueEpisodeEntries)
                    {
                        if (c.Episode is { } ep && ep.Series is { } series)
                        {
                            var meta = GetMeta(series.TmdbId, series.Title, true);
                            var title = $"{series.Title} S{ep.SeasonNumber:D2}E{ep.EpisodeNumber:D2}";
                            var progress = CalcProgress(c.ProgressSeconds, ep.DurationMinutes);
                            <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                                @PosterCardHelper.PosterCard(
                                    this,
                                    title,
                                    null,
                                    GetMeta(series.TmdbId, series.Title, true),
                                    progress: progress,
                                    onClick: () => {
                                        var series = _popularSeries.FirstOrDefault(s => s.TmdbId == meta.TmdbId);
                                        if (series != null) 
                                            Nav.NavigateTo($"/media/series/{Slugify.SlugifyUrl(series.Title)}");
                                    },
                                    tmdb: Tmdb
                                )
                            </MudItem>
                        }
                    }
                </MudGrid>
            </MudStack>
        }

        @if (_popularMovies.Any())
        {
            <MudStack Spacing="1" Class="mb-6">
                <MudText Typo="Typo.h5">Film popolari</MudText>
                @{
                    var items = _popularMovies.Take(10).ToList();
                    var visibleCount = 5;
                    var slides = new List<List<Movie>>();
                    for (int i = 0; i < items.Count; i += visibleCount)
                    {
                        slides.Add(items.Skip(i).Take(visibleCount).ToList());
                    }
                }
                <div @onmouseover="() => isMovieCarouselHovered = true" @onmouseout="() => isMovieCarouselHovered = false">
                    <MudCarousel TData="object"
                                 @bind-SelectedIndex="movieCarouselIndex"
                                 AutoCycle="@(!isMovieCarouselHovered)"
                                 AutoCycleTime="TimeSpan.FromMilliseconds(2000)"
                                 ShowArrows="true"
                                 Style="height: 29em;">
                        @foreach (var slide in slides)
                        {
                            <MudCarouselItem>
                                <MudGrid GutterSize="3" Justify="Justify.Center">
                                    @foreach (var m in slide)
                                    {
                                        var meta = GetMeta(m.TmdbId, m.Title, false);
                                        <MudItem xs="6" sm="4" md="2" lg="2" xl="2" Class="d-flex">
                                            @PosterCardHelper.PosterCard(
                                                this,
                                                meta.Title,
                                                null,
                                                GetMeta(m.TmdbId, m.Title, false),
                                                onClick: () => {
                                                    var movie = _popularMovies.FirstOrDefault(m => m.TmdbId == meta.TmdbId);
                                                    if (movie != null)
                                                        Nav.NavigateTo($"/media/movie/{Slugify.SlugifyUrl(movie.Title)}");
                                                    
                                                },
                                                tmdb: Tmdb
                                            )
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </div>
            </MudStack>
        }

        @if (_popularSeries.Any())
        {
            <MudStack Spacing="1" Class="mb-6">
                <MudText Typo="Typo.h5">Serie popolari</MudText>
                @{
                    var items = _popularSeries.Take(10).ToList();
                    var visibleCount = 5;
                    var slides = new List<List<Series>>();
                    for (int i = 0; i < items.Count; i += visibleCount)
                    {
                        slides.Add(items.Skip(i).Take(visibleCount).ToList());
                    }
                }
                <div @onmouseover="() => isSeriesCarouselHovered = true" @onmouseout="() => isSeriesCarouselHovered = false">
                    <MudCarousel TData="object"
                                 @bind-SelectedIndex="seriesCarouselIndex"
                                 AutoCycle="@(!isSeriesCarouselHovered)"
                                 AutoCycleTime="TimeSpan.FromMilliseconds(2000)"
                                 ShowArrows="true"
                                 Style="height: 29em;">
                        @foreach (var slide in slides)
                        {
                            <MudCarouselItem>
                                <MudGrid GutterSize="3" Justify="Justify.Center">
                                    @foreach (var s in slide)
                                    {
                                        var meta = GetMeta(s.TmdbId, s.Title, true);
                                        <MudItem xs="6" sm="4" md="2" lg="2" xl="2" Class="d-flex">
                                            @PosterCardHelper.PosterCard(
                                                this,
                                                meta.Title,
                                                null,
                                                GetMeta(s.TmdbId, s.Title, true),
                                                onClick: () => {
                                                    var series = _popularSeries.FirstOrDefault(s => s.TmdbId == meta.TmdbId);
                                                    if (series != null)
                                                        Nav.NavigateTo($"/media/series/{Slugify.SlugifyUrl(series.Title)}");
                                                    
                                                },
                                                tmdb: Tmdb
                                            )
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </div>
            </MudStack>
        }

        @if (_recentMovies.Any() || _recentSeries.Any())
        {
            <MudStack Spacing="1" Class="mb-6">
                <MudText Typo="Typo.h5">Aggiunti di recente</MudText>
                <MudGrid GutterSize="3">
                    @foreach (var m in _recentMovies)
                    {
                        var meta = GetMeta(m.TmdbId, m.Title, false);
                        <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                            @PosterCardHelper.PosterCard(
                                this,
                                meta.Title,
                                null,
                                GetMeta(m.TmdbId, m.Title, false),
                                onClick: () => {
                                    var movie = _popularMovies.FirstOrDefault(m => m.TmdbId == meta.TmdbId);
                                    if (movie != null)
                                        Nav.NavigateTo($"/media/movie/{Slugify.SlugifyUrl(movie.Title)}");
                                },
                                tmdb: Tmdb
                            )
                        </MudItem>
                    }
                    @foreach (var s in _recentSeries)
                    {
                        var meta = GetMeta(s.TmdbId, s.Title, true);
                        <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                            @PosterCardHelper.PosterCard(
                                this,
                                meta.Title,
                                null,
                                GetMeta(s.TmdbId, s.Title, true),
                                onClick: () => {
                                    if (meta.IsSeries)
                                    {
                                        var series = _popularSeries.FirstOrDefault(s => s.TmdbId == meta.TmdbId);
                                        if (series != null)
                                            Nav.NavigateTo($"/media/series/{Slugify.SlugifyUrl(series.Title)}");
                                    }
                                    else
                                    {
                                        var movie = _popularMovies.FirstOrDefault(m => m.TmdbId == meta.TmdbId);
                                        if (movie != null)
                                            Nav.NavigateTo($"/media/movie/{Slugify.SlugifyUrl(movie.Title)}");
                                    }
                                },
                                tmdb: Tmdb
                            )
                        </MudItem>
                    }
                </MudGrid>
            </MudStack>
        }

        @if (!_continueMovieEntries.Any() && !_continueEpisodeEntries.Any() && !_popularMovies.Any() && !_popularSeries.Any() && !_recentMovies.Any() && !_recentSeries.Any())
        {
            <MudAlert Severity="Severity.Info">Nessun contenuto trovato. Aggiungi film o serie nel database.</MudAlert>
        }
    }
</MudContainer>

@code {
    private bool _loading = true;
    private int _userId;
    private string _searchText = string.Empty;
    private List<Movie> _searchMovieResults = new();
    private List<Series> _searchSeriesResults = new();
    private bool _isSearching = false;
    private bool _showSearchResults = false;

    private List<WatchHistory> _continueMovieEntries = new();
    private List<WatchHistory> _continueEpisodeEntries = new();
    private List<Movie> _popularMovies = new();
    private List<Series> _popularSeries = new();
    private List<Movie> _recentMovies = new();
    private List<Series> _recentSeries = new();

    private int movieCarouselIndex = 0;
    private int seriesCarouselIndex = 0;

    private bool isMovieCarouselHovered = false;
    private bool isSeriesCarouselHovered = false;
    
    private readonly Dictionary<int, Meta> _meta = new();
    private readonly SemaphoreSlim _metaLock = new(1, 1);

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var idStr = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        int.TryParse(idStr, out _userId);

        await LoadDataAsync();

        var needed = new HashSet<(int tmdbId, string title, bool isSeries)>();
        foreach (var h in _continueMovieEntries) needed.Add((h.Movie!.TmdbId, h.Movie.Title, false));
        foreach (var h in _continueEpisodeEntries) needed.Add((h.Episode!.Series.TmdbId, h.Episode.Series.Title, true));
        foreach (var m in _popularMovies) needed.Add((m.TmdbId, m.Title, false));
        foreach (var s in _popularSeries) needed.Add((s.TmdbId, s.Title, true));
        foreach (var m in _recentMovies) needed.Add((m.TmdbId, m.Title, false));
        foreach (var s in _recentSeries) needed.Add((s.TmdbId, s.Title, true));

        await LoadMetadataBatchAsync(needed);

        _loading = false;
    }
    
    private async Task OnSearchInput(KeyboardEventArgs e)
    {
        // Trigger search on Enter key or after a short delay for real-time search
        if (e.Key == "Enter" || string.IsNullOrWhiteSpace(_searchText))
        {
            await PerformSearch();
        }
        else
        {
            // Optional: Add debounced search for real-time results
            await Task.Delay(300); // Small delay to avoid too many requests
            if (_searchText.Length >= 2) // Only search if at least 2 characters
            {
                await PerformSearch();
            }
        }
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchText))
        {
            _showSearchResults = false;
            _searchMovieResults.Clear();
            _searchSeriesResults.Clear();
            StateHasChanged();
            return;
        }

        _isSearching = true;
        _showSearchResults = true;
        StateHasChanged();

        try
        {
            var searchTerm = _searchText.Trim().ToLower();

            // Search movies
            _searchMovieResults = await Db.Movies
                .Where(m => m.Title.ToLower().Contains(searchTerm))
                .OrderBy(m => m.Title)
                .Take(20)
                .ToListAsync();

            // Search series
            _searchSeriesResults = await Db.Series
                .Where(s => s.Title.ToLower().Contains(searchTerm))
                .OrderBy(s => s.Title)
                .Take(20)
                .ToListAsync();

            // Load metadata for search results
            var searchNeeded = new HashSet<(int tmdbId, string title, bool isSeries)>();
            foreach (var m in _searchMovieResults) 
                searchNeeded.Add((m.TmdbId, m.Title, false));
            foreach (var s in _searchSeriesResults) 
                searchNeeded.Add((s.TmdbId, s.Title, true));

            if (searchNeeded.Any())
            {
                await LoadMetadataBatchAsync(searchNeeded);
            }
        }
        catch (Exception ex)
        {
            // Log error or handle as needed
            Console.WriteLine($"Search error: {ex.Message}");
            _searchMovieResults.Clear();
            _searchSeriesResults.Clear();
        }
        finally
        {
            _isSearching = false;
            StateHasChanged();
        }
    }

    private void ClearSearch()
    {
        _searchText = string.Empty;
        _showSearchResults = false;
        _searchMovieResults.Clear();
        _searchSeriesResults.Clear();
        StateHasChanged();
    }

    private async Task LoadDataAsync()
    {
        _continueMovieEntries = await Db.WatchHistories
            .Include(h => h.Movie)
            .Where(h => h.UserId == _userId && h.MovieId != null && !h.Completed && h.ProgressSeconds > 0)
            .OrderByDescending(h => h.LastWatched)
            .Take(20)
            .ToListAsync();

        _continueEpisodeEntries = await Db.WatchHistories
            .Include(h => h.Episode)!.ThenInclude(e => e.Series)
            .Where(h => h.UserId == _userId && h.EpisodeId != null && !h.Completed && h.ProgressSeconds > 0)
            .OrderByDescending(h => h.LastWatched)
            .Take(20)
            .ToListAsync();

        _popularMovies = await Db.Movies
            .OrderByDescending(m => m.WatchHistoryEntries.Count)
            .ThenBy(m => m.MovieId)
            .Take(30)
            .ToListAsync();

        var seriesCounts = await Db.WatchHistories
            .Where(h => h.EpisodeId != null)
            .GroupBy(h => h.Episode!.SeriesId)
            .Select(g => new { SeriesId = g.Key, Count = g.Count() })
            .ToListAsync();
        var seriesLookup = seriesCounts.ToDictionary(x => x.SeriesId, x => x.Count);

        _popularSeries = await Db.Series
            .Include(s => s.Episodes)
            .ToListAsync();
        _popularSeries = _popularSeries
            .OrderByDescending(s => seriesLookup.TryGetValue(s.SeriesId, out var c) ? c : 0)
            .ThenBy(s => s.SeriesId)
            .Take(30)
            .ToList();

        _recentMovies = await Db.Movies
            .OrderByDescending(m => m.MovieId)
            .Take(30)
            .ToListAsync();

        _recentSeries = await Db.Series
            .OrderByDescending(s => s.SeriesId)
            .Take(30)
            .ToListAsync();
    }

    // Updated LoadMetadataBatchAsync to include BackdropPath
    private async Task LoadMetadataBatchAsync(IEnumerable<(int tmdbId, string title, bool isSeries)> items)
    {
        var tasks = items
            .Where(i => !_meta.ContainsKey(i.tmdbId))
            .Select(async i =>
            {
                try
                {
                    var results = await Tmdb.SearchAsync(i.title);
                    var match = results.FirstOrDefault(r => r.Id == i.tmdbId)
                                ?? results.FirstOrDefault(r => string.Equals(r.Title, i.title, StringComparison.OrdinalIgnoreCase));
                    
                    // Now includes BackdropPath from the updated search results
                    var meta = new Meta(i.tmdbId, i.title, i.isSeries, match?.PosterPath, match?.BackdropPath, match?.Overview);

                    await _metaLock.WaitAsync();
                    try
                    {
                        _meta[i.tmdbId] = meta;
                    }
                    finally
                    {
                        _metaLock.Release();
                    }
                }
                catch
                {
                    // Handle error gracefully
                }
            });

        await Task.WhenAll(tasks);
        StateHasChanged();
    }

    private Meta GetMeta(int tmdbId, string title, bool isSeries)
        => _meta.TryGetValue(tmdbId, out var m) ? m : new Meta(tmdbId, title, isSeries, null, null, null);

    private static double CalcProgress(int progressSec, int? durationMin)
        => (durationMin is null or <= 0) ? 0 : Math.Clamp(progressSec / (durationMin.Value * 60.0), 0, 1);
}