@page "/"
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using Streamify.Data
@using Streamify.TMDB
@inject StreamifyDbContext Db
@inject AuthenticationStateProvider AuthStateProvider
@inject ITmdbClient Tmdb

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudTextField @bind-Value="_searchText"
                  Label="Cerca film o serie..."
                  Variant="Variant.Outlined"
                  Immediate="true"
                  OnKeyDown="OnSearchInput"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Class="mb-4"
    />
    
    @if (_showSearchResults)
    {
        <MudStack Spacing="2" Class="mb-6">
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5">Risultati ricerca: "@_searchText"</MudText>
                <MudButton StartIcon="@Icons.Material.Filled.Clear" 
                          Color="Color.Secondary" 
                          Size="Size.Small"
                          OnClick="ClearSearch">
                    Cancella
                </MudButton>
            </MudStack>

            @if (_isSearching)
            {
                <MudProgressCircular Indeterminate Size="Size.Small" Class="ma-2"/>
            }
            else if (!_searchMovieResults.Any() && !_searchSeriesResults.Any())
            {
                <MudAlert Severity="Severity.Warning">
                    Nessun risultato trovato per "@_searchText".
                </MudAlert>
            }
            else
            {
                @* Search Results - Movies *@
                @if (_searchMovieResults.Any())
                {
                    <MudStack Spacing="1" Class="mb-4">
                        <MudText Typo="Typo.h6">Film (@_searchMovieResults.Count)</MudText>
                        <MudGrid GutterSize="3">
                            @foreach (var m in _searchMovieResults.Take(12))
                            {
                                var meta = GetMeta(m.TmdbId, m.Title, false);
                                var poster = FullPoster(meta.PosterPath);
                                var subtitle = $"Film";
                                
                                @* Add duration if available *@
                                if (m.DurationMinutes.HasValue && m.DurationMinutes > 0)
                                {
                                    subtitle += $" • {m.DurationMinutes}min";
                                }

                                <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                                    @PosterCard(meta.Title, subtitle, poster)
                                </MudItem>
                            }
                        </MudGrid>
                        
                        @* Show more results if there are many *@
                        @if (_searchMovieResults.Count > 12)
                        {
                            <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                                Mostrati 12 di @_searchMovieResults.Count risultati
                            </MudText>
                        }
                    </MudStack>
                }

                @* Search Results - Series *@
                @if (_searchSeriesResults.Any())
                {
                    <MudStack Spacing="1" Class="mb-4">
                        <MudText Typo="Typo.h6">Serie TV (@_searchSeriesResults.Count)</MudText>
                        <MudGrid GutterSize="3">
                            @foreach (var s in _searchSeriesResults.Take(12))
                            {
                                var meta = GetMeta(s.TmdbId, s.Title, true);
                                var poster = FullPoster(meta.PosterPath);
                                var episodeCount = s.Episodes?.Count ?? 0;
                                var seasonCount = s.Episodes?.GroupBy(e => e.SeasonNumber).Count() ?? 0;
                                
                                var subtitle = "Serie TV";
                                if (seasonCount > 0)
                                {
                                    subtitle += $" • {seasonCount} stagion{(seasonCount == 1 ? "e" : "i")}";
                                }
                                if (episodeCount > 0)
                                {
                                    subtitle += $" • {episodeCount} episodi";
                                }
                                
                                <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                                    @PosterCard(meta.Title, subtitle, poster)
                                </MudItem>
                            }
                        </MudGrid>
                        
                        @* Show more results if there are many *@
                        @if (_searchSeriesResults.Count > 12)
                        {
                            <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-2">
                                Mostrati 12 di @_searchSeriesResults.Count risultati
                            </MudText>
                        }
                    </MudStack>
                }
            }
        </MudStack>
    }
    else if (_loading)
    {
        <MudProgressCircular Indeterminate Class="ma-auto d-block"/>
    }
    else
    {
        @if (_continueMovieEntries.Any() || _continueEpisodeEntries.Any())
        {
            <MudStack Spacing="1" Class="mb-6">
                <MudText Typo="Typo.h5">Continua a guardare</MudText>
                <MudGrid GutterSize="3">
                    @foreach (var c in _continueMovieEntries)
                    {
                        if (c.Movie is { } m)
                        {
                            var meta = GetMeta(m.TmdbId, m.Title, false);
                            var poster = FullPoster(meta.PosterPath);
                            var progress = CalcProgress(c.ProgressSeconds, m.DurationMinutes);
                            <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                                @PosterCard(meta.Title, null, poster, progress)
                            </MudItem>
                        }
                    }
                    @foreach (var c in _continueEpisodeEntries)
                    {
                        if (c.Episode is { } ep && ep.Series is { } series)
                        {
                            var meta = GetMeta(series.TmdbId, series.Title, true);
                            var poster = FullPoster(meta.PosterPath);
                            var title = $"{series.Title} S{ep.SeasonNumber:D2}E{ep.EpisodeNumber:D2}";
                            var progress = CalcProgress(c.ProgressSeconds, ep.DurationMinutes);
                            <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                                @PosterCard(title, null, poster, progress)
                            </MudItem>
                        }
                    }
                </MudGrid>
            </MudStack>
        }

        @if (_popularMovies.Any())
        {
            <MudStack Spacing="1" Class="mb-6">
                <MudText Typo="Typo.h5">Film popolari</MudText>
                @{
                    var items = _popularMovies.Take(10).ToList();
                    var visibleCount = 5;
                    var slides = new List<List<Movie>>();
                    for (int i = 0; i < items.Count; i++)
                    {
                        var slide = new List<Movie>();
                        for (int j = 0; j < visibleCount; j++)
                        {
                            slide.Add(items[(i + j) % items.Count]);
                        }

                        slides.Add(slide);
                    }
                }
                <div @onmouseover="() => isMovieCarouselHovered = true" @onmouseout="() => isMovieCarouselHovered = false">
                    <MudCarousel TData="object"
                                 @bind-SelectedIndex="movieCarouselIndex"
                                 AutoCycle="@(!isMovieCarouselHovered)"
                                 AutoCycleTime="TimeSpan.FromMilliseconds(2000)"
                                 ShowArrows="true"
                                 Style="height: 29em;">
                        @foreach (var slide in slides)
                        {
                            <MudCarouselItem>
                                <MudGrid GutterSize="3">
                                    @foreach (var m in slide)
                                    {
                                        var meta = GetMeta(m.TmdbId, m.Title, false);
                                        var poster = FullPoster(meta.PosterPath);
                                        <MudItem xs="6" sm="4" md="2" lg="2" xl="2" Class="d-flex">
                                            @PosterCard(meta.Title, null, poster)
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </div>
            </MudStack>
        }

        @if (_popularSeries.Any())
        {
            <MudStack Spacing="1" Class="mb-6">
                <MudText Typo="Typo.h5">Serie popolari</MudText>
                @{
                    var items = _popularSeries.Take(10).ToList();
                    var visibleCount = 5;
                    var slides = new List<List<Series>>();
                    for (int i = 0; i < items.Count; i++)
                    {
                        var slide = new List<Series>();
                        for (int j = 0; j < visibleCount; j++)
                        {
                            slide.Add(items[(i + j) % items.Count]);
                        }

                        slides.Add(slide);
                    }
                }
                <div @onmouseover="() => isSeriesCarouselHovered = true" @onmouseout="() => isSeriesCarouselHovered = false">
                    <MudCarousel TData="object"
                                 @bind-SelectedIndex="seriesCarouselIndex"
                                 AutoCycle="@(!isSeriesCarouselHovered)"
                                 AutoCycleTime="TimeSpan.FromMilliseconds(2000)"
                                 ShowArrows="true"
                                 Style="height: 29em;">
                        @foreach (var slide in slides)
                        {
                            <MudCarouselItem>
                                <MudGrid GutterSize="3">
                                    @foreach (var s in slide)
                                    {
                                        var meta = GetMeta(s.TmdbId, s.Title, true);
                                        var poster = FullPoster(meta.PosterPath);
                                        <MudItem xs="6" sm="4" md="2" lg="2" xl="2" Class="d-flex">
                                            @PosterCard(meta.Title, null, poster)
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </div>
            </MudStack>
        }

        @if (_recentMovies.Any() || _recentSeries.Any())
        {
            <MudStack Spacing="1" Class="mb-6">
                <MudText Typo="Typo.h5">Aggiunti di recente</MudText>
                <MudGrid GutterSize="3">
                    @foreach (var m in _recentMovies)
                    {
                        var meta = GetMeta(m.TmdbId, m.Title, false);
                        var poster = FullPoster(meta.PosterPath);
                        <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                            @PosterCard(meta.Title, null, poster)
                        </MudItem>
                    }
                    @foreach (var s in _recentSeries)
                    {
                        var meta = GetMeta(s.TmdbId, s.Title, true);
                        var poster = FullPoster(meta.PosterPath);
                        <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                            @PosterCard(meta.Title, null, poster)
                        </MudItem>
                    }
                </MudGrid>
            </MudStack>
        }

        @if (!_continueMovieEntries.Any() && !_continueEpisodeEntries.Any() && !_popularMovies.Any() && !_popularSeries.Any() && !_recentMovies.Any() && !_recentSeries.Any())
        {
            <MudAlert Severity="Severity.Info">Nessun contenuto trovato. Aggiungi film o serie nel database.</MudAlert>
        }
    }
</MudContainer>

@code {
    private bool _loading = true;
    private int _userId;
    private string _searchText = string.Empty;
    private List<Movie> _searchMovieResults = new();
    private List<Series> _searchSeriesResults = new();
    private bool _isSearching = false;
    private bool _showSearchResults = false;

    private List<WatchHistory> _continueMovieEntries = new();
    private List<WatchHistory> _continueEpisodeEntries = new();
    private List<Movie> _popularMovies = new();
    private List<Series> _popularSeries = new();
    private List<Movie> _recentMovies = new();
    private List<Series> _recentSeries = new();

    private int movieCarouselIndex = 0;
    private int seriesCarouselIndex = 0;

    private bool isMovieCarouselHovered = false;
    private bool isSeriesCarouselHovered = false;

    private record Meta(int TmdbId, string Title, bool IsSeries, string? PosterPath, string? Overview);

    private readonly Dictionary<int, Meta> _meta = new();
    private readonly SemaphoreSlim _metaLock = new(1, 1);

    protected override async Task OnInitializedAsync()
    {
        var auth = await AuthStateProvider.GetAuthenticationStateAsync();
        var idStr = auth.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        int.TryParse(idStr, out _userId);

        await LoadDataAsync();

        var needed = new HashSet<(int tmdbId, string title, bool isSeries)>();
        foreach (var h in _continueMovieEntries) needed.Add((h.Movie!.TmdbId, h.Movie.Title, false));
        foreach (var h in _continueEpisodeEntries) needed.Add((h.Episode!.Series.TmdbId, h.Episode.Series.Title, true));
        foreach (var m in _popularMovies) needed.Add((m.TmdbId, m.Title, false));
        foreach (var s in _popularSeries) needed.Add((s.TmdbId, s.Title, true));
        foreach (var m in _recentMovies) needed.Add((m.TmdbId, m.Title, false));
        foreach (var s in _recentSeries) needed.Add((s.TmdbId, s.Title, true));

        await LoadMetadataBatchAsync(needed);

        _loading = false;
    }
    
    private async Task OnSearchInput(KeyboardEventArgs e)
    {
        // Trigger search on Enter key or after a short delay for real-time search
        if (e.Key == "Enter" || string.IsNullOrWhiteSpace(_searchText))
        {
            await PerformSearch();
        }
        else
        {
            // Optional: Add debounced search for real-time results
            await Task.Delay(300); // Small delay to avoid too many requests
            if (_searchText.Length >= 2) // Only search if at least 2 characters
            {
                await PerformSearch();
            }
        }
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(_searchText))
        {
            _showSearchResults = false;
            _searchMovieResults.Clear();
            _searchSeriesResults.Clear();
            StateHasChanged();
            return;
        }

        _isSearching = true;
        _showSearchResults = true;
        StateHasChanged();

        try
        {
            var searchTerm = _searchText.Trim().ToLower();

            // Search movies
            _searchMovieResults = await Db.Movies
                .Where(m => m.Title.ToLower().Contains(searchTerm))
                .OrderBy(m => m.Title)
                .Take(20)
                .ToListAsync();

            // Search series
            _searchSeriesResults = await Db.Series
                .Where(s => s.Title.ToLower().Contains(searchTerm))
                .OrderBy(s => s.Title)
                .Take(20)
                .ToListAsync();

            // Load metadata for search results
            var searchNeeded = new HashSet<(int tmdbId, string title, bool isSeries)>();
            foreach (var m in _searchMovieResults) 
                searchNeeded.Add((m.TmdbId, m.Title, false));
            foreach (var s in _searchSeriesResults) 
                searchNeeded.Add((s.TmdbId, s.Title, true));

            if (searchNeeded.Any())
            {
                await LoadMetadataBatchAsync(searchNeeded);
            }
        }
        catch (Exception ex)
        {
            // Log error or handle as needed
            Console.WriteLine($"Search error: {ex.Message}");
            _searchMovieResults.Clear();
            _searchSeriesResults.Clear();
        }
        finally
        {
            _isSearching = false;
            StateHasChanged();
        }
    }

    // Add this method to clear search when user clicks elsewhere
    private void ClearSearch()
    {
        _searchText = string.Empty;
        _showSearchResults = false;
        _searchMovieResults.Clear();
        _searchSeriesResults.Clear();
        StateHasChanged();
    }

    private async Task LoadDataAsync()
    {
        _continueMovieEntries = await Db.WatchHistories
            .Include(h => h.Movie)
            .Where(h => h.UserId == _userId && h.MovieId != null && !h.Completed && h.ProgressSeconds > 0)
            .OrderByDescending(h => h.LastWatched)
            .Take(20)
            .ToListAsync();

        _continueEpisodeEntries = await Db.WatchHistories
            .Include(h => h.Episode)!.ThenInclude(e => e.Series)
            .Where(h => h.UserId == _userId && h.EpisodeId != null && !h.Completed && h.ProgressSeconds > 0)
            .OrderByDescending(h => h.LastWatched)
            .Take(20)
            .ToListAsync();

        _popularMovies = await Db.Movies
            .OrderByDescending(m => m.WatchHistoryEntries.Count)
            .ThenBy(m => m.MovieId)
            .Take(30)
            .ToListAsync();

        var seriesCounts = await Db.WatchHistories
            .Where(h => h.EpisodeId != null)
            .GroupBy(h => h.Episode!.SeriesId)
            .Select(g => new { SeriesId = g.Key, Count = g.Count() })
            .ToListAsync();
        var seriesLookup = seriesCounts.ToDictionary(x => x.SeriesId, x => x.Count);

        _popularSeries = await Db.Series
            .Include(s => s.Episodes)
            .ToListAsync();
        _popularSeries = _popularSeries
            .OrderByDescending(s => seriesLookup.TryGetValue(s.SeriesId, out var c) ? c : 0)
            .ThenBy(s => s.SeriesId)
            .Take(30)
            .ToList();

        _recentMovies = await Db.Movies
            .OrderByDescending(m => m.MovieId)
            .Take(30)
            .ToListAsync();

        _recentSeries = await Db.Series
            .OrderByDescending(s => s.SeriesId)
            .Take(30)
            .ToListAsync();
    }

    private async Task LoadMetadataBatchAsync(IEnumerable<(int tmdbId, string title, bool isSeries)> items)
    {
        var tasks = items
            .Where(i => !_meta.ContainsKey(i.tmdbId))
            .Select(async i =>
            {
                try
                {
                    var results = await Tmdb.SearchAsync(i.title);
                    var match = results.FirstOrDefault(r => r.Id == i.tmdbId)
                                ?? results.FirstOrDefault(r => string.Equals(r.Title, i.title, StringComparison.OrdinalIgnoreCase));
                    var meta = new Meta(i.tmdbId, i.title, i.isSeries, match?.PosterPath, match?.Overview);

                    await _metaLock.WaitAsync();
                    try
                    {
                        _meta[i.tmdbId] = meta;
                    }
                    finally
                    {
                        _metaLock.Release();
                    }
                }
                catch
                {
                }
            });

        await Task.WhenAll(tasks);
        StateHasChanged();
    }

    private Meta GetMeta(int tmdbId, string title, bool isSeries)
        => _meta.TryGetValue(tmdbId, out var m) ? m : new Meta(tmdbId, title, isSeries, null, null);

    private static double CalcProgress(int progressSec, int? durationMin)
        => (durationMin is null or <= 0) ? 0 : Math.Clamp(progressSec / (durationMin.Value * 60.0), 0, 1);

    private static string FormatProgress(int progressSec, int? durationMin)
    {
        if (durationMin is null or <= 0) return $"{progressSec / 60} min visti";
        var pct = (int)(CalcProgress(progressSec, durationMin) * 100);
        return $"{pct}%";
    }

    // Enhanced PosterCard method with better image handling
private RenderFragment PosterCard(string title, string? subtitle, string? img, double? progress = null)
    => builder =>
    {
        var seq = 0;
        builder.OpenComponent<MudCard>(seq++);
        builder.AddAttribute(seq++, "Class", "d-flex flex-column");
        builder.AddAttribute(seq++, "Style", "height: 100%; cursor: pointer;");
        builder.AddAttribute(seq++, "Elevation", 2);
        builder.AddAttribute(seq++, "ChildContent", (RenderFragment)(b =>
        {
            var s = 0;

            // Image section with loading state and fallback
            b.OpenElement(s++, "div");
            b.AddAttribute(s++, "class", "position-relative");
            b.AddAttribute(s++, "style", "height: 300px; overflow: hidden;");

            if (!string.IsNullOrEmpty(img))
            {
                b.OpenComponent<MudImage>(s++);
                b.AddAttribute(s++, "Src", img);
                b.AddAttribute(s++, "Alt", title);
                b.AddAttribute(s++, "ObjectFit", ObjectFit.Cover);
                b.AddAttribute(s++, "Class", "flex-grow-0 flex-shrink-0");
                b.AddAttribute(s++, "Height", 300);
                b.AddAttribute(s++, "Style", "width: 100%; transition: opacity 0.3s ease;");
                b.CloseComponent();
            }
            else
            {
                // Fallback when no image is available
                b.OpenElement(s++, "div");
                b.AddAttribute(s++, "class", "d-flex align-center justify-center");
                b.AddAttribute(s++, "style", "height: 300px; background: linear-gradient(135deg, #f5f5f5 0%, #e0e0e0 100%); border-radius: 4px;");
                
                b.OpenComponent<MudStack>(s++);
                b.AddAttribute(s++, "AlignItems", AlignItems.Center);
                b.AddAttribute(s++, "Spacing", 2);
                b.AddAttribute(s++, "ChildContent", (RenderFragment)(fallback =>
                {
                    fallback.OpenComponent<MudIcon>(0);
                    fallback.AddAttribute(1, "Icon", Icons.Material.Filled.Movie);
                    fallback.AddAttribute(2, "Size", Size.Large);
                    fallback.AddAttribute(3, "Color", Color.Default);
                    fallback.CloseComponent();
                    
                    fallback.OpenComponent<MudText>(4);
                    fallback.AddAttribute(5, "Typo", Typo.caption);
                    fallback.AddAttribute(6, "Align", Align.Center);
                    fallback.AddAttribute(7, "Color", Color.Default);
                    fallback.AddAttribute(8, "ChildContent", (RenderFragment)(t => t.AddContent(0, "Poster non disponibile")));
                    fallback.CloseComponent();
                }));
                b.CloseComponent();
                
                b.CloseElement(); // div
            }

            // Progress bar overlay if progress is provided
            if (progress is > 0)
            {
                b.OpenElement(s++, "div");
                b.AddAttribute(s++, "class", "position-absolute");
                b.AddAttribute(s++, "style", "bottom: 0; left: 0; right: 0; padding: 8px;");
                
                b.OpenComponent<MudProgressLinear>(s++);
                b.AddAttribute(s++, "Value", progress * 100);
                b.AddAttribute(s++, "Color", Color.Primary);
                b.AddAttribute(s++, "Rounded", true);
                b.AddAttribute(s++, "Size", Size.Medium);
                b.CloseComponent();
                
                b.CloseElement(); // div
            }

            b.CloseElement(); // position-relative div

            // Card content section
            b.OpenComponent<MudCardContent>(s++);
            b.AddAttribute(s++, "Class", "pt-3 pb-2 flex-grow-1");
            b.AddAttribute(s++, "ChildContent", (RenderFragment)(c =>
            {
                c.OpenComponent<MudText>(0);
                c.AddAttribute(1, "Typo", Typo.subtitle2);
                c.AddAttribute(2, "Align", Align.Center);
                c.AddAttribute(3, "Class", "font-weight-medium line-height-sm");
                c.AddAttribute(4, "Style", "word-break: break-word; hyphens: auto;");
                c.AddAttribute(5, "ChildContent", (RenderFragment)(t => t.AddContent(0, title)));
                c.CloseComponent();

                if (!string.IsNullOrWhiteSpace(subtitle))
                {
                    c.OpenComponent<MudText>(6);
                    c.AddAttribute(7, "Typo", Typo.caption);
                    c.AddAttribute(8, "Align", Align.Center);
                    c.AddAttribute(9, "Color", Color.Default);
                    c.AddAttribute(10, "Class", "mt-1");
                    c.AddAttribute(11, "ChildContent", (RenderFragment)(t => t.AddContent(0, subtitle)));
                    c.CloseComponent();
                }
            }));
            b.CloseComponent();
        }));
        builder.CloseComponent();
    };

    // Helper method to validate and format poster URLs
    private static string? FullPoster(string? path)
    {
        if (string.IsNullOrWhiteSpace(path)) return null;
        
        // Ensure the path starts with a forward slash
        if (!path.StartsWith("/"))
            path = "/" + path;
            
        return $"https://image.tmdb.org/t/p/w342{path}";
    }
}