@page "/admin/remove-media"
@using Microsoft.EntityFrameworkCore
@using Streamify.Data
@using Streamify.TMDB
@inject IDialogService DialogService
@using Streamify.Utility
@attribute [Authorize(Roles = "Admin")]

@inject StreamifyDbContext Db
@inject ITmdbClient Tmdb

<PageTitle>Rimuovi Media</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudText Typo="Typo.h3">Remove Media</MudText>
    <MudTextField @bind-Value="searchText"
                  Label="Search movies or series..."
                  Variant="Variant.Outlined"
                  Adornment="Adornment.Start"
                  AdornmentIcon="@Icons.Material.Filled.Search"
                  Class="mb-4"
                  Immediate="true" />

    @if (loading)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
    }
    else
    {
        <MudText Typo="Typo.h4">Movies</MudText>
        <MudGrid GutterSize="3">
            @foreach (var movie in FilteredMovies)
            {
                <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                    @PosterCardHelper.PosterCard(
                        this,
                        movie.Title,
                        null,
                        new Meta(movie.TmdbId, movie.Title, false, moviePosterUrls.GetValueOrDefault(movie.MovieId), null, null),
                        Tmdb,
                        () => ConfirmRemoveMovie(movie.MovieId)
                    )
                </MudItem>
            }
        </MudGrid>
        <MudText Typo="Typo.h4" Class="mt-4">Series</MudText>
        <MudGrid GutterSize="3">
            @foreach (var series in FilteredSeries)
            {
                <MudItem xs="6" sm="4" md="3" lg="2" xl="2" Class="d-flex">
                    @PosterCardHelper.PosterCard(
                        this,
                        series.Title,
                        null,
                        new Meta(series.TmdbId, series.Title, true, seriesPosterUrls.GetValueOrDefault(series.SeriesId), null, null),
                        Tmdb,
                        () => ConfirmRemoveSeries(series.SeriesId)
                    )
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    private bool loading = true;
    private string searchText = string.Empty;
    private List<Movie> movies = new();
    private List<Series> seriesList = new();
    private Dictionary<int, string?> moviePosterUrls = new();
    private Dictionary<int, string?> seriesPosterUrls = new();

    protected override async Task OnInitializedAsync()
    {
        movies = await Db.Movies.ToListAsync();
        seriesList = await Db.Series.ToListAsync();

        foreach (var movie in movies)
        {
            var tmdbMovie = await Tmdb.GetMovieAsync(movie.TmdbId);
            moviePosterUrls[movie.MovieId] = Tmdb.GetPosterUrl(tmdbMovie?.PosterPath, TmdbImageSize.W342);
        }

        foreach (var series in seriesList)
        {
            var tmdbSeries = await Tmdb.GetSeriesAsync(series.TmdbId);
            seriesPosterUrls[series.SeriesId] = Tmdb.GetPosterUrl(tmdbSeries?.PosterPath, TmdbImageSize.W342);
        }

        loading = false;
    }

    private IEnumerable<Movie> FilteredMovies =>
        string.IsNullOrWhiteSpace(searchText)
            ? movies
            : movies.Where(m => m.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<Series> FilteredSeries =>
        string.IsNullOrWhiteSpace(searchText)
            ? seriesList
            : seriesList.Where(s => s.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    private async Task RemoveMovie(int movieId)
    {
        var movie = await Db.Movies.FindAsync(movieId);
        if (movie == null) return;

        var histories = Db.WatchHistories.Where(h => h.MovieId == movieId);
        Db.WatchHistories.RemoveRange(histories);

        var mediaFiles = Db.MediaFiles.Where(m => m.MovieId == movieId);
        Db.MediaFiles.RemoveRange(mediaFiles);

        Db.Movies.Remove(movie);
        await Db.SaveChangesAsync();

        movies.RemoveAll(m => m.MovieId == movieId);
        moviePosterUrls.Remove(movieId);
        StateHasChanged();
    }

    private async Task RemoveSeries(int seriesId)
    {
        var series = await Db.Series.FindAsync(seriesId);
        if (series == null) return;

        var episodes = Db.Episodes.Where(e => e.SeriesId == seriesId).ToList();

        foreach (var ep in episodes)
        {
            var histories = Db.WatchHistories.Where(h => h.EpisodeId == ep.EpisodeId);
            Db.WatchHistories.RemoveRange(histories);

            var mediaFiles = Db.MediaFiles.Where(m => m.EpisodeId == ep.EpisodeId);
            Db.MediaFiles.RemoveRange(mediaFiles);
        }

        Db.Episodes.RemoveRange(episodes);
        Db.Series.Remove(series);
        await Db.SaveChangesAsync();

        seriesList.RemoveAll(s => s.SeriesId == seriesId);
        seriesPosterUrls.Remove(seriesId);
        StateHasChanged();
    }
    
    private async void ConfirmRemoveMovie(int movieId)
    {
        var parameters = new DialogParameters { ["Message"] = "Are you sure you want to delete this movie?" };
        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Small };
        var dialog = DialogService.Show<RemoveDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await RemoveMovie(movieId);
    }

    private async void ConfirmRemoveSeries(int seriesId)
    {
        var series = seriesList.FirstOrDefault(s => s.SeriesId == seriesId);
        var episodes = Db.Episodes.Where(e => e.SeriesId == seriesId).OrderBy(e => e.SeasonNumber).ThenBy(e => e.EpisodeNumber).ToList();

        var parameters = new DialogParameters
        {
            ["SeriesTitle"] = series?.Title ?? "Series",
            ["Episodes"] = episodes
        };
        var options = new DialogOptions { CloseButton = false, MaxWidth = MaxWidth.Medium };
        var dialog = DialogService.Show<RemoveSeriesDialog>("Remove Series or Episode", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is string && (string)result.Data == "series")
            {
                await RemoveSeries(seriesId);
            }
            else if (result.Data is int episodeId)
            {
                await RemoveEpisode(episodeId);
            }
        }
    }

    private async Task RemoveEpisode(int episodeId)
    {
        var episode = await Db.Episodes.FindAsync(episodeId);
        if (episode == null) return;

        var histories = Db.WatchHistories.Where(h => h.EpisodeId == episodeId);
        Db.WatchHistories.RemoveRange(histories);

        var mediaFiles = Db.MediaFiles.Where(m => m.EpisodeId == episodeId);
        Db.MediaFiles.RemoveRange(mediaFiles);

        Db.Episodes.Remove(episode);
        await Db.SaveChangesAsync();
        
        StateHasChanged();
    }
}

