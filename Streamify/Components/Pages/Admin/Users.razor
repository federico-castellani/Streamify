@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@using Streamify.Data
@inject StreamifyDbContext Db
@using Microsoft.EntityFrameworkCore

<h3>Users</h3>

@if (loading)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (error is not null)
{
    <MudAlert Severity="Severity.Error">@error</MudAlert>
}
else
{
    <MudTable Items="users" Hover="true" Dense="true">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Role</MudTh>
            <MudTh>Dark Mode</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            @if (editUser is not null && editUser.Id == context.Id)
            {
                <MudTd>@context.Id</MudTd>
                <MudTd><MudTextField @bind-Value="editUser.Email" Required="true" /></MudTd>
                <MudTd><MudTextField @bind-Value="editUser.Name" /></MudTd>
                <MudTd>
                    <MudSelect @bind-Value="editUser.Role" Required="true">
                        <MudSelectItem T="string" Value="@("Admin")">Admin</MudSelectItem>
                        <MudSelectItem T="string" Value="@("User")">User</MudSelectItem>
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSwitch T="bool" @bind-Value="editUser.DarkMode" Color="Color.Primary" />
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Success" OnClick="SaveAsync" />
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" OnClick="CancelEdit" />
                </MudTd>
            }
            else
            {
                <MudTd>@context.Id</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Role</MudTd>
                <MudTd>
                    <MudIcon Icon="@(context.DarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" />
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => BeginEdit(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteAsync(context))" />
                </MudTd>
            }
        </RowTemplate>
    </MudTable>
}

@code {
    private List<User> users = new();
    private User? editUser;
    private bool loading = true;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        loading = true;
        error = null;
        try
        {
            users = await Db.Users.AsNoTracking().OrderBy(u => u.Id).ToListAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private void BeginEdit(User u)
    {
        // Copy so cancel reverts.
        editUser = new User
        {
            Id = u.Id,
            Email = u.Email,
            Name = u.Name,
            Role = u.Role,
            DarkMode = u.DarkMode,
            HashedPassword = u.HashedPassword
        };
    }

    private void CancelEdit() => editUser = null;

    private async Task SaveAsync()
    {
        if (editUser is null) return;
        try
        {
            var existing = await Db.Users.FindAsync(editUser.Id);
            if (existing is null)
            {
                error = "User not found.";
                return;
            }

            existing.Email = editUser.Email;
            existing.Name = editUser.Name;
            existing.Role = editUser.Role;
            existing.DarkMode = editUser.DarkMode;
            await Db.SaveChangesAsync();

            // Reflect changes locally
            var idx = users.FindIndex(u => u.Id == existing.Id);
            if (idx >= 0)
                users[idx] = existing;

            editUser = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private async Task DeleteAsync(User u)
    {
        try
        {
            var entity = await Db.Users.FindAsync(u.Id);
            if (entity is null) return;
            Db.Users.Remove(entity);
            await Db.SaveChangesAsync();
            users.Remove(u);
            if (editUser?.Id == u.Id) editUser = null;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}